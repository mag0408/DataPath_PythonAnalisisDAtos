# -*- coding: utf-8 -*-
"""FranciscoDuarte_Ejercicios_Calificados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wcGU84UqRN4T4-u-ZtB89ZmzY1RW2mpY
"""

################################################################################################# Clase 1 - Letra en palabra
def contadorletras (inletra, frase):
  contador = 0
  for letraFrase in frase:
    if inletra == letraFrase:
      contador = contador + 1
  print (f"la cantidad de veces que aparece la letra: {inletra} en la frase es: {contador}")


inletra = input ("Digite una letra: ")
frase = input ("Digite una frase: ")
contadorletras(inletra, frase)

################################################################################################

################################################################################################# Clase 2 - Búsqueda de un numero entero N en lista L
def buscarN (n, lista):
  try:
    indice = lista.index(n)
    print (f"Encontrado en la posicion: {indice}")
  except:
    print ("No encontrado")
    print ("-1")




lista = []
numero = int(input ("Digite el numer entero a encontrar: "))
lista = eval (input ("Digite la lista de numeros: "))
buscarN (numero, lista)
################################################################################################

################################################################################################ Clase 2 - Algoritmo de ordenamiento
def ordenarlista (lista):
  lista_ordenada = []
  cantidad = len(lista)
  for i in range(cantidad):
    num_menor_actual = min(lista)
    lista.remove(num_menor_actual)
    lista_ordenada.append(num_menor_actual)
  return lista_ordenada

lista_a_ordenar = []
lista_a_ordenar = eval(input("Escriba la lista a ordenar: "))
print(ordenarlista(lista_a_ordenar))
################################################################################################

################################################################################################ Clase 2 - Problema de la bolsa
def probarcapacidad (pesomax, listaobjs):
  lista_pesos_totales = []
  peso_actual = 0
  for fila in listaobjs:
    peso_por_fila = fila[1]*fila[2]
    if (peso_por_fila+peso_actual) <= pesomax:
      peso_actual = peso_por_fila+peso_actual
      lista_pesos_totales.append(peso_por_fila)
  return lista_pesos_totales


matriz_productos = []
matriz_productos = eval(input("Escriba la lista de productos. Nombre del producto, su peso y su cantidad en una matriz: "))
pesomax = int(input("Escriba el peso maximo de su bolsa: "))
print(probarcapacidad(pesomax, matriz_productos))
################################################################################################

################################################################################################ Clase 3 - Problema de matrices D y E
import numpy as np


def suma(d, e):
  if np.size(d) != np.size(e):
    return np.concatenate( (d.flatten(), e.flatten()), axis= 0 )
  else:
    dim = np.shape(d)
    suma = d.flatten() + e.flatten()
    return suma.reshape(dim)

#matriz1= np.array( [ [1,-1], [-1,3] ] )
listaD = eval(input("digite su matriz D: "))
listaE = eval(input("digite su matriz E: "))

matriz = np.array( listaD )
vector = np.array( listaE )
suma(matriz, vector)
################################################################################################

################################################################################################ Clase 3 - Problema de crear un cuadrado
import numpy as np

def crear_cuadrado(x,y,m,square_size):
  matriz_ceros = np.zeros((m, m))
  j = y
  try:
    for x in range(x, x+square_size,):
      for y in range(y, y+square_size):
        matriz_ceros[x,y] = 255
      y = j
    return matriz_ceros
  except:
    print("No se puede crear el cuadrado en la posición proporcionada debido a la falta de espacio en los bordes")
    print(None)

x = int(input("Digite la pos X: "))
y = int(input("Digite la pos Y: "))
m = int(input("Digite el tamanho de la imagen/matriz: "))
square_size = int(input("Digite el tamanho del cuadrado: "))

print(crear_cuadrado(x, y, m, square_size))
################################################################################################

################################################################################################ Clase 4 - ejercicio 5
import pandas as pd

df = pd.read_csv('sales_train.csv')
grupo = df.groupby(['item_id', 'item_price']).size().reset_index(name='count')
grupo = grupo.drop(columns='count')
grupo = grupo.groupby('item_id').size().reset_index(name='count')
grupo = grupo.loc[grupo['count'] <= 1]
cantidad_filas = grupo.shape[0]
print("Cantidad de productos con un unico precio durante todo el tiempo:", cantidad_filas)
################################################################################################

################################################################################################ Clase 4 - ejercicio 6
import pandas as pd

df = pd.read_csv('sales_train.csv')
df['mult'] = df['item_price'] * df['item_cnt_day']
df[['day', 'month', 'year']] = df['date'].str.split('.', expand=True)
df = df[(df['month'] == '01') & (df['year'] == '2013')]
totalVentasEnero13 = df['item_price'].sum()
print("Suma de item_price para enero de 2013:", totalVentasEnero13)
################################################################################################

################################################################################################ Clase 4 - ejercicio 7
import pandas as pd

df = pd.read_csv('titanic.csv')
m = df[df['Sex'] == 'female']
mcount = m['Survived'].value_counts()
h = df[df['Sex'] == 'male']
hcount = h['Survived'].value_counts()

print(f"Mujeres vivas: {mcount[1]}\nMujeres muertas: {mcount[0]}\nHombres vivos: {hcount[1]}\nHombres muertos: {hcount[0]}\n")

totalpasajeros = df['PassengerId'].sum()
print(totalpasajeros)

#print(df[['Survived', 'Pclass', 'Name' ]])

survivedByClass = df[df['Survived'] == 1]
survivedByClass = (survivedByClass.groupby('Pclass')['Survived'].count() / df.groupby('Pclass')['Survived'].count()) * 100
print(survivedByClass)


################################################################################################